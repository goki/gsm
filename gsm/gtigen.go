// Code generated by "goki generate ./..."; DO NOT EDIT.

package gsm

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/gsm/gsm.Config",
	ShortName: "gsm.Config",
	IDName:    "config",
	Doc:       "Config contains the configuration information for the GSM tool",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Update", &gti.Field{Name: "Update", Type: "bool", LocalType: "bool", Doc: "Update is whether to update dependencies and tidy modules\nwhen doing a release cycle. It should only be turned off\nin rare cases in which updating dependencies or tidying\nmodules would cause problems or is not possible.", Directives: gti.Directives{}, Tag: "cmd:\"release\" def:\"true\""}},
		{"Repository", &gti.Field{Name: "Repository", Type: "string", LocalType: "string", Doc: "The name of the repository to create a vanity import site for.\nA major version suffix can be added to the end of the repository name\n(eg: \"gi/v2\")", Directives: gti.Directives{}, Tag: "cmd:\"new-vanity\" posarg:\"0\""}},
		{"IOSFramework", &gti.Field{Name: "IOSFramework", Type: "goki.dev/gsm/gsm.IOSFramework", LocalType: "IOSFramework", Doc: "the config info for the make-ios-framework command", Directives: gti.Directives{}, Tag: "cmd:\"make-ios-framework\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/gsm/gsm.IOSFramework",
	ShortName: "gsm.IOSFramework",
	IDName:    "ios-framework",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Dylib", &gti.Field{Name: "Dylib", Type: "string", LocalType: "string", Doc: "the path of the .dylib file", Directives: gti.Directives{}, Tag: ""}},
		{"Framework", &gti.Field{Name: "Framework", Type: "string", LocalType: "string", Doc: "the name of the resulting framework", Directives: gti.Directives{}, Tag: ""}},
		{"Developer", &gti.Field{Name: "Developer", Type: "string", LocalType: "string", Doc: "the name/email address of the developer to have sign the framework", Directives: gti.Directives{}, Tag: ""}},
		{"Organization", &gti.Field{Name: "Organization", Type: "string", LocalType: "string", Doc: "the organization to use in the bundle id for the resulting framework", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Changed",
	Doc:  "Changed concurrently prints all of the repositories that have been changed\nand need to be updated in version control.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Clone",
	Doc:  "Clone concurrently clones all of the GoKi Go repositories into the current directory.\nIt does not clone repositories that the user already has in the current directory.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Gendex",
	Doc:  "Gendex runs goki.dev/goki/mobile/gendex.go and install-tools.\nIt should be run in the base goki directory whenever\ngoki.dev/goosi/driver/android/GoNativeActivty.java is updated.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.InstallTools",
	Doc:  "InstallTools installs all of the GoKi tools required for development on\nthe GoKi codebase (goki, gsm, gtigen, and enumgen). It should be run in a\ndirectory containing all of the goki repositories (set up with gsm clone),\nand with a go.work file contianing all of those repositories (set up with gsm work).",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.MakeIOSFramework",
	Doc:  "MakeIOSFramework makes a .framework file for iOS from\na .dylib file, using the given config information.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Pull",
	Doc:  "Pull concurrently pulls all of the Git repositories in the current directory.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Release",
	Doc:  "Release releases all of the GoKi Go repositories in the current folder with goki.dev\nvanity import URLs (those without vanity import URLs should be released separately),\nrecursively updating each one and all of its dependencies, but stopping\nafter a couple of iterations due to pseudo-import cycles at the module level.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.NewVanity",
	Doc:  "NewVanity makes a new vanity import URL page for the config\nrepository name. It should only be called in the root directory\nof the goki.github.io repository. It commits and pushes the page.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/gsm/gsm.Work",
	Doc:  "Work adds all of the Go modules in the current directory to the go.work\nfile in the current directory.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*goki.dev/gsm/gsm.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})
